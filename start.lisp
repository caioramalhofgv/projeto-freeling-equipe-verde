(ql:quickload :cl-ppcre)

(defun read-data (filename)
  (with-open-file (in filename)
    (let ((dict))
      (do ((line (read-line in nil nil)
         (read-line in nil nil)))
      ((null line) (reverse dict))
    (push (cl-ppcre:split "[ ]+" line) dict)))))


(defun clean-suffix (filedata-1 filedata-2 output-file suffix)
  (let ((data1 (read-data filedata-1))
    (data2 (read-data filedata-2))
    (res))
    (dolist (r1 data1 res)
      (if (cl-ppcre:scan (format nil "~a$" suffix) (car r1))
      (let ((candidate (cl-ppcre:regex-replace suffix (car r1) "")))
        (format *debug-io* "finding ~a (~a) ~%" (car r1) candidate)
        (if (not (find candidate data2 :key #'car :test #'equal))
        (push r1 res)))
      (push r1 res)))
    (with-open-file (out output-file :direction :output :if-exists :supersede)
      (dolist (reg (reverse res))
    (format out "~{~a~^ ~}~%" reg)))))

(clean-suffix "adv" "adjs" "adv-new" "mente")


(defun clean-verbs (filename output)
  (let ((data (read-data filename))
    (res))
    (dolist (r data res)
      (if (cl-ppcre:scan "^re" (car r))
      (let ((candidate (cl-ppcre:regex-replace "^re" (car r) "")))
        (format *debug-io* "Finding ~a (~a) ~%" (car r) candidate)
        (if (not (find-if (lambda (d)
                (and (equal candidate (car d))
                     (equal (caddr r) (caddr d))))
                  data))
        (push r res)))
      (push r res)))
    (with-open-file (out output :direction :output :if-exists :supersede)
      (dolist (reg (reverse res))
    (format out "~{~a~^ ~}~%" reg)))))

(clean-verbs "verbs" "verbs-new")
